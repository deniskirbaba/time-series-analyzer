import os
import sys
import tempfile
from datetime import datetime

from api_calls import (
    create_time_series,
    delete_time_series,
    get_time_series,
    get_user_info,
    top_up_balance,
)

import streamlit as st

sys.path.append("..")
from ts.validate_series import TimeSeriesValidationError, validate_time_series

st.markdown("# –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")

if "authenticated" not in st.session_state:
    st.session_state.authenticated = False
if "access_token" not in st.session_state:
    st.session_state.access_token = None
if "user_info" not in st.session_state:
    st.session_state.user_info = None

if not st.session_state.authenticated or not st.session_state.access_token:
    st.warning("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
    st.info(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É."
    )

    col1, col2 = st.columns(2)
    with col1:
        if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—Ö–æ–¥—É", use_container_width=True):
            st.switch_page("login_page.py")
    with col2:
        if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", use_container_width=True):
            st.switch_page("register_page.py")
else:
    _, _, _, _, refresh_container = st.columns(5)
    with refresh_container:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", help="–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"):
            with st.spinner("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."):
                updated_info = get_user_info(st.session_state.access_token)
                if updated_info:
                    st.session_state.user_info = updated_info
                    st.rerun()
                else:
                    st.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

    if st.session_state.user_info:
        user = st.session_state.user_info

        st.markdown("---")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–ò–º—è", user.get("name", "N/A"))
        with col2:
            st.metric("–õ–æ–≥–∏–Ω", user.get("login", "N/A"))

        st.markdown("---")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–ë–∞–ª–∞–Ω—Å", f"{user.get('balance', 0):.2f} ‚ÇΩ")
        with col2:
            if st.button("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", use_container_width=True):
                st.session_state.show_topup_modal = True

        if "show_topup_modal" not in st.session_state:
            st.session_state.show_topup_modal = False

        if st.session_state.show_topup_modal:
            with st.container():
                st.markdown("### –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")

                with st.form("topup_form"):
                    amount = st.number_input(
                        "–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (‚ÇΩ)",
                        min_value=0.01,
                        max_value=100000.0,
                        value=100.0,
                        step=0.01,
                        format="%.2f",
                    )

                    col1, col2 = st.columns(2)
                    with col1:
                        submit_button = st.form_submit_button(
                            "–ü–æ–ø–æ–ª–Ω–∏—Ç—å", use_container_width=True
                        )
                    with col2:
                        cancel_button = st.form_submit_button(
                            "–û—Ç–º–µ–Ω–∞", use_container_width=True
                        )

                    if submit_button:
                        if amount > 0:
                            with st.spinner("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞..."):
                                result = top_up_balance(
                                    st.session_state.access_token, amount
                                )
                                if result:
                                    st.session_state.user_info = result
                                    st.session_state.show_topup_modal = False
                                    st.success(
                                        f"–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.2f} ‚ÇΩ!"
                                    )
                                    st.rerun()
                                else:
                                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")
                        else:
                            st.error("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")

                    if cancel_button:
                        st.session_state.show_topup_modal = False
                        st.rerun()

        st.markdown("---")
        st.subheader("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã")

        st.markdown("#### –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")
        with st.expander("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞", expanded=False):
            with open("../data/time_series_requirements.txt", "r") as f:
                st.markdown(f.read())

        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ä—è–¥–æ–º",
            type=["csv"],
            help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ä—è–¥–æ–º —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤—ã—à–µ",
        )

        if uploaded_file is not None:
            try:
                with tempfile.NamedTemporaryFile(suffix=".csv") as tmp_file:
                    tmp_file.write(uploaded_file.getvalue())
                    tmp_file_path = tmp_file.name
                    with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞..."):
                        validated_df = validate_time_series(tmp_file_path)
                st.success("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ä—è–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω.")

                st.markdown("**–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:**")
                st.dataframe(validated_df.head(5))
                st.text(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {len(validated_df)}")

                ts_name = st.text_input(
                    "–ù–∞–∑–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞",
                )

                if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä—è–¥", type="primary"):
                    if ts_name.strip():
                        try:
                            ts_data = {
                                "name": ts_name.strip(),
                                "user_id": user.get("id"),
                                "data": validated_df["target"].tolist(),
                            }
                            with st.spinner("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞..."):
                                result = create_time_series(
                                    st.session_state.access_token, ts_data
                                )
                                if result:
                                    st.success(
                                        f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ä—è–¥ '{ts_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω."
                                    )
                                    updated_info = get_user_info(
                                        st.session_state.access_token
                                    )
                                    if updated_info:
                                        st.session_state.user_info = updated_info
                                    st.rerun()
                                else:
                                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞.")
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}.")
                    else:
                        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞.")

            except TimeSeriesValidationError as e:
                st.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}.")
            except Exception as e:
                st.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}.")

        st.markdown("---")
        st.markdown("#### –ú–æ–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã")
        time_series_ids = user.get("time_series", [])

        if time_series_ids:
            st.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤: {len(time_series_ids)}")

            for i, ts_id in enumerate(time_series_ids, 1):
                with st.container():
                    st.markdown(f"##### –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ #{i}")

                    ts_details = get_time_series(st.session_state.access_token, ts_id)

                    if ts_details:
                        size_bytes = (
                            ts_details.get("length", 0) * 4
                        )  # assuming that each value is in 32 bit
                        size_mb = size_bytes / (1024 * 1024)

                        col1, col2, col3, col4 = st.columns(4)
                        with col1:
                            st.metric("–ù–∞–∑–≤–∞–Ω–∏–µ", ts_details.get("name", "N/A"))
                        with col2:
                            st.metric("–î–ª–∏–Ω–∞", ts_details.get("length", 0))
                        with col3:
                            created_at = ts_details.get("created_at", "N/A")
                            if created_at != "N/A":
                                try:
                                    dt = datetime.fromisoformat(
                                        created_at.replace("Z", "+00:00")
                                    )
                                    formatted_date = dt.strftime("%Y-%m-%d %H:%M")
                                except:
                                    formatted_date = created_at
                            else:
                                formatted_date = "N/A"
                            st.metric("–°–æ–∑–¥–∞–Ω", formatted_date)
                        with col4:
                            st.metric("–†–∞–∑–º–µ—Ä", f"{size_mb:.4f} MB")

                        col1, col2, col3 = st.columns([1, 1, 2])
                        with col1:
                            if st.button(f"–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å", key=f"explore_{ts_id}"):
                                st.info(
                                    "–§—É–Ω–∫—Ü–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ"
                                )
                        with col2:
                            if st.button(
                                f"–£–¥–∞–ª–∏—Ç—å", key=f"delete_{ts_id}", type="secondary"
                            ):
                                with st.spinner("–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞..."):
                                    success = delete_time_series(
                                        st.session_state.access_token,
                                        ts_id,
                                        user.get("id"),
                                    )
                                    if success:
                                        st.success(
                                            f"–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ '{ts_details.get('name', 'N/A')}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
                                        )
                                        updated_info = get_user_info(
                                            st.session_state.access_token
                                        )
                                        if updated_info:
                                            st.session_state.user_info = updated_info
                                        st.rerun()
                                    else:
                                        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")
                    else:
                        st.error(
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ä—è–¥—É ID: {ts_id}"
                        )

                    st.markdown("---")
        else:
            st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")

        st.markdown("---")
        with st.expander("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏"):
            st.write(
                f"**–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:** {'‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' if st.session_state.authenticated else '‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}"
            )
            st.write(
                f"**–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞:** {'‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if st.session_state.access_token else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
            )
            st.write(
                f"**–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )

    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        if st.button("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"):
            st.rerun()
