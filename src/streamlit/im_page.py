from datetime import datetime

from api_calls import get_user_info, top_up_balance

import streamlit as st

st.markdown("# –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")

if "authenticated" not in st.session_state:
    st.session_state.authenticated = False
if "access_token" not in st.session_state:
    st.session_state.access_token = None
if "user_info" not in st.session_state:
    st.session_state.user_info = None

if not st.session_state.authenticated or not st.session_state.access_token:
    st.warning("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
    st.info(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É."
    )

    col1, col2 = st.columns(2)
    with col1:
        if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—Ö–æ–¥—É", use_container_width=True):
            st.switch_page("login_page.py")
    with col2:
        if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", use_container_width=True):
            st.switch_page("register_page.py")
else:
    _, _, _, _, refresh_container = st.columns(5)
    with refresh_container:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", help="–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"):
            with st.spinner("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."):
                updated_info = get_user_info(st.session_state.access_token)
                if updated_info:
                    st.session_state.user_info = updated_info
                    st.rerun()
                else:
                    st.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

    if st.session_state.user_info:
        user = st.session_state.user_info

        st.markdown("---")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–ò–º—è", user.get("name", "N/A"))
        with col2:
            st.metric("–õ–æ–≥–∏–Ω", user.get("login", "N/A"))

        st.markdown("---")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–ë–∞–ª–∞–Ω—Å", f"{user.get('balance', 0):.2f} ‚ÇΩ")
        with col2:
            if st.button("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", use_container_width=True):
                st.session_state.show_topup_modal = True

        if "show_topup_modal" not in st.session_state:
            st.session_state.show_topup_modal = False

        if st.session_state.show_topup_modal:
            with st.container():
                st.markdown("### –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")

                with st.form("topup_form"):
                    amount = st.number_input(
                        "–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (‚ÇΩ)",
                        min_value=0.01,
                        max_value=100000.0,
                        value=100.0,
                        step=0.01,
                        format="%.2f",
                    )

                    col1, col2 = st.columns(2)
                    with col1:
                        submit_button = st.form_submit_button(
                            "–ü–æ–ø–æ–ª–Ω–∏—Ç—å", use_container_width=True
                        )
                    with col2:
                        cancel_button = st.form_submit_button(
                            "–û—Ç–º–µ–Ω–∞", use_container_width=True
                        )

                    if submit_button:
                        if amount > 0:
                            with st.spinner("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞..."):
                                result = top_up_balance(
                                    st.session_state.access_token, amount
                                )
                                if result:
                                    st.session_state.user_info = result
                                    st.session_state.show_topup_modal = False
                                    st.success(
                                        f"–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.2f} ‚ÇΩ!"
                                    )
                                    st.rerun()
                                else:
                                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")
                        else:
                            st.error("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")

                    if cancel_button:
                        st.session_state.show_topup_modal = False
                        st.rerun()

        st.markdown("---")
        st.subheader("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã")
        time_series = user.get("time_series", [])

        if time_series:
            st.info(f"–£ –≤–∞—Å –µ—Å—Ç—å {len(time_series)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")

            with st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å ID –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤"):
                for i, ts_id in enumerate(time_series, 1):
                    st.write(f"{i}. –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ ID: {ts_id}")
        else:
            st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")

        st.markdown("---")
        with st.expander("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏"):
            st.write(
                f"**–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:** {'‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' if st.session_state.authenticated else '‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}"
            )
            st.write(
                f"**–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞:** {'‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if st.session_state.access_token else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
            )
            st.write(
                f"**–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )

    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        if st.button("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"):
            st.rerun()
