import sys
from datetime import datetime

import matplotlib.pyplot as plt
import pandas as pd
from api_calls import get_model, get_time_series

import streamlit as st

sys.path.append("..")

st.markdown("# –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")

if "authenticated" not in st.session_state:
    st.session_state.authenticated = False
if "access_token" not in st.session_state:
    st.session_state.access_token = None
if "user_info" not in st.session_state:
    st.session_state.user_info = None
if "selected_ts_id" not in st.session_state:
    st.session_state.selected_ts_id = None

# Not authorized logic
if not st.session_state.authenticated or not st.session_state.access_token:
    st.warning("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏–∑—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤.")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—Ö–æ–¥—É", use_container_width=True):
            st.switch_page("login_page.py")
    with col2:
        if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", use_container_width=True):
            st.switch_page("register_page.py")
    st.stop()

# Authorized logic
if not st.session_state.selected_ts_id:
    st.warning("–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω!")
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.")

    if st.button("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", use_container_width=True):
        st.switch_page("im_page.py")
    st.stop()

ts_id = st.session_state.selected_ts_id
ts_data = get_time_series(st.session_state.access_token, ts_id)

if not ts_data:
    st.error(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –µ—â–µ —Ä–∞–∑ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ."
    )
    if st.button("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", use_container_width=True):
        st.switch_page("im_page.py")
    st.stop()

_, _, _, _, refresh_container = st.columns(5)
with refresh_container:
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"):
        st.rerun()

st.markdown("---")
st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ä—è–¥–µ")

col1, col2, col3, col4 = st.columns(4)
with col1:
    st.metric("–ù–∞–∑–≤–∞–Ω–∏–µ", ts_data.get("name", "N/A"))
with col2:
    st.metric("–î–ª–∏–Ω–∞", ts_data.get("length", 0))
with col3:
    created_at = ts_data.get("created_at", "N/A")
    if created_at != "N/A":
        try:
            dt = datetime.fromisoformat(created_at.replace("Z", "+00:00"))
            formatted_date = dt.strftime("%Y-%m-%d %H:%M")
        except:
            formatted_date = created_at
    else:
        formatted_date = "N/A"
    st.metric("–°–æ–∑–¥–∞–Ω", formatted_date)
with col4:
    size_bytes = ts_data.get("length", 0) * 4  # assuming 32-bit floats
    size_mb = size_bytes / (1024 * 1024)
    st.metric("–†–∞–∑–º–µ—Ä", f"{size_mb:.4f} MB")

st.markdown("#### –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")
data_values = ts_data.get("data", [])
if data_values:
    df = pd.DataFrame(
        {"–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å": range(len(data_values)), "–ó–Ω–∞—á–µ–Ω–∏–µ": data_values}
    )

    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(df["–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å"], df["–ó–Ω–∞—á–µ–Ω–∏–µ"], linewidth=1.5, color="#1f77b4")
    ax.set_xlabel("–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å")
    ax.set_ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
    ax.set_title(f"–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥: {ts_data.get('name', 'N/A')}")
    ax.grid(True, alpha=0.3)
    st.pyplot(fig)
    plt.close()
else:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")

st.markdown("---")
st.subheader("–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")

analysis_results = ts_data.get("analysis_results", {})
has_analysis = bool(analysis_results and analysis_results != {})

with st.expander("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–µ", expanded=False):
    with open("../data/time_series_analysis_info.txt", "r") as f:
        st.markdown(f.read())

if has_analysis:
    st.success("–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω")
else:
    st.info("–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
    col1, col2 = st.columns([1, 3])
    with col1:
        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True):
            st.info("–§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö")
    with col2:
        st.markdown(
            "*–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –ê–Ω–∞–ª–∏–∑ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è*"
        )

st.markdown("---")
st.subheader("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")
