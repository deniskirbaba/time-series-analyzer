import sys
from datetime import datetime

import matplotlib.pyplot as plt
import pandas as pd
from api_calls import (
    get_all_models,
    get_analysis_task_status,
    get_time_series,
    start_analysis_task,
)

import streamlit as st

sys.path.append("..")

st.markdown("# –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")

if "authenticated" not in st.session_state:
    st.session_state.authenticated = False
if "access_token" not in st.session_state:
    st.session_state.access_token = None
if "user_info" not in st.session_state:
    st.session_state.user_info = None
if "selected_ts_id" not in st.session_state:
    st.session_state.selected_ts_id = None

# Not authorized logic
if not st.session_state.authenticated or not st.session_state.access_token:
    st.warning("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏–∑—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤.")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—Ö–æ–¥—É", use_container_width=True):
            st.switch_page("login_page.py")
    with col2:
        if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", use_container_width=True):
            st.switch_page("register_page.py")
    st.stop()

# Authorized logic
if not st.session_state.selected_ts_id:
    st.warning("–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω!")
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.")

    if st.button("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", use_container_width=True):
        st.switch_page("im_page.py")
    st.stop()

ts_id = st.session_state.selected_ts_id
ts_data = get_time_series(st.session_state.access_token, ts_id)

if not ts_data:
    st.error(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –µ—â–µ —Ä–∞–∑ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ."
    )
    if st.button("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", use_container_width=True):
        st.switch_page("im_page.py")
    st.stop()

_, _, _, _, refresh_container = st.columns(5)
with refresh_container:
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"):
        st.rerun()

st.markdown("---")
st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ä—è–¥–µ")

col1, col2, col3, col4 = st.columns(4)
with col1:
    st.metric("–ù–∞–∑–≤–∞–Ω–∏–µ", ts_data.get("name", "N/A"))
with col2:
    st.metric("–î–ª–∏–Ω–∞", ts_data.get("length", 0))
with col3:
    created_at = ts_data.get("created_at", "N/A")
    if created_at != "N/A":
        try:
            dt = datetime.fromisoformat(created_at.replace("Z", "+00:00"))
            formatted_date = dt.strftime("%Y-%m-%d %H:%M")
        except:
            formatted_date = created_at
    else:
        formatted_date = "N/A"
    st.metric("–°–æ–∑–¥–∞–Ω", formatted_date)
with col4:
    size_bytes = ts_data.get("length", 0) * 4  # assuming 32-bit floats
    size_mb = size_bytes / (1024 * 1024)
    st.metric("–†–∞–∑–º–µ—Ä", f"{size_mb:.4f} MB")

st.markdown("#### –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")
data_values = ts_data.get("data", [])
if data_values:
    df = pd.DataFrame(
        {"–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å": range(len(data_values)), "–ó–Ω–∞—á–µ–Ω–∏–µ": data_values}
    )

    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(df["–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å"], df["–ó–Ω–∞—á–µ–Ω–∏–µ"], linewidth=1.5, color="#1f77b4")
    ax.set_xlabel("–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å")
    ax.set_ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
    ax.set_title(f"–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥: {ts_data.get('name', 'N/A')}")
    ax.grid(True, alpha=0.3)
    st.pyplot(fig)
    plt.close()
else:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")

st.markdown("---")
st.subheader("–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")

analysis_results = ts_data.get("analysis_results", {})
has_analysis = bool(analysis_results and analysis_results != {})

task_status = get_analysis_task_status(st.session_state.access_token, ts_id)

with st.expander("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–µ", expanded=False):
    with open("../data/time_series_analysis_info.txt", "r") as f:
        st.markdown(f.read())

if has_analysis:
    st.success("–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω")

    with st.expander("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞", expanded=True):
        if isinstance(analysis_results, dict) and "error" not in analysis_results:
            st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–°—Ä–µ–¥–Ω–µ–µ", f"{analysis_results['mean']:.3f}")
                st.metric("–ú–µ–¥–∏–∞–Ω–∞", f"{analysis_results['median']:.3f}")
            with col2:
                st.metric("–°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", f"{analysis_results['std']:.3f}")
            with col3:
                st.metric("–ú–∏–Ω–∏–º—É–º", f"{analysis_results['min']:.3f}")
                st.metric("–ú–∞–∫—Å–∏–º—É–º", f"{analysis_results['max']:.3f}")
            with col4:
                st.metric("25-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å", f"{analysis_results['q25']:.3f}")
                st.metric("75-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å", f"{analysis_results['q75']:.3f}")

            st.subheader("–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞")
            col1, col2 = st.columns(2)
            p_val = analysis_results["trend_test_p_value"]
            with col1:
                trend_result = analysis_results["trend_test_result"]
                if trend_result == "increasing":
                    st.success(f"–¢—Ä–µ–Ω–¥: –í–æ–∑—Ä–∞—Å—Ç–∞—é—â–∏–π")
                elif trend_result == "decreasing":
                    st.error(f"–¢—Ä–µ–Ω–¥: –£–±—ã–≤–∞—é—â–∏–π")
                else:
                    st.info(f"–¢—Ä–µ–Ω–¥: {trend_result}")
                if p_val < 0.05:
                    st.success("–¢—Ä–µ–Ω–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º (p < 0.05)")
                else:
                    st.info("–¢—Ä–µ–Ω–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–∑–Ω–∞—á–∏–º (p ‚â• 0.05)")
            with col2:
                st.metric("P-–∑–Ω–∞—á–µ–Ω–∏–µ (–ú–∞–Ω–Ω-–ö–µ–Ω–¥–∞–ª–ª)", f"{p_val:.5f}")

            st.subheader("ARCH-—Ç–µ—Å—Ç (–≥–µ—Ç–µ—Ä–æ—Å–∫–µ–¥–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å)")
            arch_p = analysis_results["arch_test_p_value"]
            col1, col2 = st.columns(2)
            with col1:
                if arch_p < 0.05:
                    st.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≥–µ—Ç–µ—Ä–æ—Å–∫–µ–¥–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å")
                else:
                    st.success("–ì–æ–º–æ—Å–∫–µ–¥–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å")
            with col2:
                st.metric("ARCH —Ç–µ—Å—Ç p-–∑–Ω–∞—á–µ–Ω–∏–µ", f"{arch_p:.5f}")

            st.subheader("–ß–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
            freq_data = analysis_results["fourier_freqs"]
            if "frequencies" in freq_data and "amplitudes" in freq_data:
                freq_df = pd.DataFrame(
                    {
                        "–ß–∞—Å—Ç–æ—Ç–∞": freq_data["frequencies"],
                        "–ê–º–ø–ª–∏—Ç—É–¥–∞": freq_data["amplitudes"],
                    }
                )
                st.dataframe(freq_df, use_container_width=True)

            col1, col2 = st.columns(2)
            with col1:
                st.subheader("–ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
                most_freq = analysis_results["most_frequent"]
                for value, count in most_freq.items():
                    st.write(f"**{float(value):.3f}**: {count} —Ä–∞–∑")

            with col2:
                st.subheader("–ù–∞–∏–º–µ–Ω–µ–µ —á–∞—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
                least_freq = analysis_results["least_frequent"]
                for value, count in least_freq.items():
                    st.write(f"**{float(value):.3f}**: {count} —Ä–∞–∑")

            st.subheader("–ì—Ä–∞—Ñ–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
            fig, ax = plt.subplots(figsize=(14, 8))
            original_data = ts_data.get("data", [])
            x_axis = range(len(original_data))
            ax.plot(x_axis, original_data, label="–ò—Å—Ö–æ–¥–Ω—ã–π —Ä—è–¥", alpha=0.7, linewidth=1)
            smoothed = analysis_results["smoothed_series"]
            ax.plot(
                x_axis,
                smoothed,
                label="–°–≥–ª–∞–∂–µ–Ω–Ω—ã–π —Ä—è–¥ (EWM)",
                linewidth=2,
                color="orange",
            )
            trend = analysis_results["linear_trend"]
            ax.plot(
                x_axis,
                trend,
                label="–õ–∏–Ω–µ–π–Ω—ã–π —Ç—Ä–µ–Ω–¥",
                linewidth=2,
                color="red",
                linestyle="--",
            )

            ax.set_xlabel("–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å")
            ax.set_ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
            ax.set_title("–ò—Å—Ö–æ–¥–Ω—ã–π —Ä—è–¥, —Å–≥–ª–∞–∂–µ–Ω–Ω—ã–π —Ä—è–¥ –∏ —Ç—Ä–µ–Ω–¥")
            ax.legend()
            ax.grid(True, alpha=0.3)
            st.pyplot(fig)
            plt.close()

            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 10))

            residuals = analysis_results["residuals"]
            x_axis = range(len(residuals))

            ax1.plot(x_axis, residuals, color="green", alpha=0.8)
            ax1.axhline(y=0, color="red", linestyle="--", alpha=0.7)
            ax1.set_xlabel("–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å")
            ax1.set_ylabel("–û—Å—Ç–∞—Ç–∫–∏")
            ax1.set_title("–û—Å—Ç–∞—Ç–∫–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞")
            ax1.grid(True, alpha=0.3)

            ax2.hist(residuals, bins=30, alpha=0.7, color="green", edgecolor="black")
            ax2.axvline(x=0, color="red", linestyle="--", alpha=0.7)
            ax2.set_xlabel("–ó–Ω–∞—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤")
            ax2.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
            ax2.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤")
            ax2.grid(True, alpha=0.3)

            plt.tight_layout()
            st.pyplot(fig)
            plt.close()

        elif isinstance(analysis_results, dict) and "error" in analysis_results:
            st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis_results['error']}")
        else:
            st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
            st.write(analysis_results)

elif task_status and task_status.get("has_task"):
    status = task_status.get("status")
    updated_at = task_status.get("updated_at")

    if status == "queued":
        st.info("–ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
        st.write("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")

    elif status == "in_progress":
        st.info("–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
        if updated_at:
            try:
                dt = datetime.fromisoformat(updated_at.replace("Z", "+00:00"))
                formatted_time = dt.strftime("%Y-%m-%d %H:%M:%S")
                st.write(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {formatted_time}")
            except:
                st.write(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {updated_at}")

    elif status == "failed":
        st.error("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
        st.write(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∑–∞–Ω–æ–≤–æ."
        )

        col1, col2 = st.columns([1, 3])
        with col1:
            if st.button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True):
                result = start_analysis_task(st.session_state.access_token, ts_id)
                if result:
                    st.success("–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ!")
                    st.rerun()
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑")
        with col2:
            st.markdown("*–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ*")

    elif status == "done":
        st.warning("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        st.write(
            "–ê–Ω–∞–ª–∏–∑ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—â–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É."
        )

else:
    st.info("–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
    col1, col2 = st.columns([1, 3])
    with col1:
        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True):
            result = start_analysis_task(st.session_state.access_token, ts_id)
            if result:
                st.success("–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω!")
                st.rerun()
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑")
    with col2:
        st.markdown(
            "*–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –ê–Ω–∞–ª–∏–∑ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è*"
        )

st.markdown("---")
st.subheader("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")

with st.expander("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏", expanded=False):
    with open("../data/time_series_forecasting_info.txt", "r") as f:
        st.markdown(f.read())
with st.expander("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ —Ç–∞—Ä–∏—Ñ—ã", expanded=False):
    models_data = get_all_models(st.session_state.access_token)
    if models_data:
        for i, model in enumerate(models_data):
            if i != 0:
                st.markdown("---")
            st.markdown(f"##### {model['name']}")
            st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {model['info']}")
            st.markdown(f"**–¢–∞—Ä–∏—Ñ:** {model['tariffs']} ‚ÇΩ –∑–∞ —Ç–æ—á–∫—É")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("FH=10", f"{model['tariffs'] * 10:.2f} ‚ÇΩ")
            with col2:
                st.metric("FH=25", f"{model['tariffs'] * 25:.2f} ‚ÇΩ")
            with col3:
                st.metric("FH=50", f"{model['tariffs'] * 50:.2f} ‚ÇΩ")
    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª—è—Ö")
